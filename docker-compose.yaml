services:
  loadbalancer:
    build:
      context: ./loadbalancer
      dockerfile: Dockerfile
    ports:
      - "${LOADBALANCER_PORT}:${LOADBALANCER_PORT}"
    networks:
      - dockerintranet
    environment:
      LOADBALANCER_PORT: ${LOADBALANCER_PORT}
      NODE_PORT: ${NODE_PORT}
      PYTHON_PORT: ${PYTHON_PORT}
      NODE_SERVICE: http://node:${NODE_PORT}
      PYTHON_SERVICE: http://python:${PYTHON_PORT}
    volumes:
      - ./routes.json:/app/routes.json
    depends_on:
      - node
      - python

  node:
    build:
      context: ./node
      dockerfile: Dockerfile
    networks:
      - dockerintranet
    environment:
      NODE_PORT: ${NODE_PORT}
      PYTHON_PORT: ${PYTHON_PORT}
      NODE_NODEY_PORT: ${NODE_NODEY_PORT}
      PYTHON_NODEY_PORT: ${PYTHON_NODEY_PORT}
    volumes:
      - ./module:/app/module
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:${NODE_PORT}/health"]
    #   interval: 5s
    #   retries: 5
    #   start_period: 5s

  python:
    build:
      context: ./python
      dockerfile: Dockerfile
    networks:
      - dockerintranet
    environment:
      NODE_PORT: ${NODE_PORT}
      PYTHON_PORT: ${PYTHON_PORT}
      NODE_NODEY_PORT: ${NODE_NODEY_PORT}
      PYTHON_NODEY_PORT: ${PYTHON_NODEY_PORT}
    # volumes:
    #   - ./module:/app/module
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:${PYTHON_PORT}/health"]
    #   interval: 5s
    #   retries: 5
    #   start_period: 5s

networks:
  dockerintranet:
    driver: bridge
